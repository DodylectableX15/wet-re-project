//------------------------------------------------
//--- 010 Editor v11.0.1 Binary Template
//
//      File: lu.bt
//   Authors: PikminGuts92
//   Version: 1.1
//   Purpose: Reversing LU files of WET
//  Category: 
// File Mask: *.lu
//  ID Bytes: 
//   History: 
//------------------------------------------------

BigEndian();

struct Blocks;
struct Files;

string read_blocks(Blocks& blocks)
{
    local string s;
    return SPrintf(s, "(%d blocks)", blocks.count);
}

string read_files(Files& files)
{
    local string s;
    return SPrintf(s, "(%d files)", files.count);
}

typedef enum
{
    UNCOMPRESSED,
    BLOCKED = 2,
} BLOCK_MODE;

// 24 bytes
typedef struct
{
    uint key<format=hex>;
    uint size_1;
    uint always_ff<format=hex>;
    uint uncompressed_size;
    uint uncompressed_offset;
    uint unknown;
} FileEntry;

typedef struct (uint start_offset, FileEntry& fe)
{
    // Each file has own header data and padding
    FSeek(start_offset + fe.uncompressed_offset);
    byte data[fe.uncompressed_size];
} File;

typedef struct (uint size)
{
    byte data[size];
} DataBlock;

typedef struct (uint start)
{
    uint pos;
    local uint abs_pos = start + pos;
    local byte is_null = pos == 0xFFFFFFFF ? 1 : 0;
} Offset<read=read_offset>;

string read_offset(Offset& offset)
{
    if (offset.pos == 0xFFFFFFFF)
    {
        return "---";
    }

    local string s;
    SPrintf(s, "%d", offset.abs_pos);
    return s;
}

// Note: Data can be padded with "BF BF BF"... bytes
typedef struct
{
    struct PlatformHeader
    {
        char magic[4]; // (0x30 + 'x36') or (0x01 + 'ps3')
        FSkip(28);
    } platform_header;

    // True start which offsets reference
    local uint start = FTell();

    struct CrapHeader
    {
        uint64 always_ff<format=hex>;
        uint always_0;

        Offset external_file_name_offset(start);
        uint external_file_name_size; // Including null terminator byte

        Offset block_data_offset(start);
        Offset file_data_offset(start);
        uint always_0;

        Offset data_start_offset(start); // Use for either block/file start
    } crap_data;

    // Read external file name
    if (!crap_data.external_file_name_offset.is_null)
    {
        FSeek(crap_data.external_file_name_offset.abs_pos);
        if (crap_data.external_file_name_size > 0) char external_file_name[crap_data.external_file_name_size];
    }

    // Read block data
    if (!crap_data.block_data_offset.is_null)
    {
        FSeek(crap_data.block_data_offset.abs_pos);
        struct BlockData
        {
            BLOCK_MODE block_mode; // 0, 2
            uint uncompressed_size;

            uint unk_0; // Will match uncompressed_size if data uncompressed
            uint unk_1; // 1, 5
            Offset block_sizes_offset(start);

            uint block_count;
            if (block_count > 0)
            {
                // Read block entries
                FSeek(block_sizes_offset.abs_pos);
                uint block_sizes[block_count];
            }
        } block_data;
    }

    // Read file data
    if (!crap_data.file_data_offset.is_null)
    {
        FSeek(crap_data.file_data_offset.abs_pos);
        struct FileData
        {
            Offset file_entries_offset(start);
            uint file_entries_count;

            if (file_entries_count > 0)
            {
                // Read file entries
                FSeek(file_entries_offset.abs_pos);
                FileEntry file_entries[file_entries_count];
            }
        } file_data;
    }

    // Read data
    if (!crap_data.data_start_offset.is_null && exists(block_data))
    {
        FSeek(crap_data.data_start_offset.abs_pos);

        if (block_data.block_mode == UNCOMPRESSED && exists(file_data) && exists(file_data.file_entries))
        {
            // Read files
            struct Files
            {
                local uint files_offset = FTell();
                local uint count = file_data.file_entries_count;

                local int i;
                for (i = 0; i < file_data.file_entries_count; i++)
                {
                    File files(files_offset, file_data.file_entries[i]);
                }
            } files<read=read_files>;
        }
        else if (block_data.block_mode == BLOCKED && exists(block_data.block_sizes))
        {
            // Read blocks
            struct Blocks
            {
                local uint count = block_data.block_count;

                local int i;
                for (i = 0; i < block_data.block_count; i++)
                {
                    DataBlock blocks(block_data.block_sizes[i]);
                }
            } blocks<read=read_blocks>;
        }
        else
        {
            Printf("WARN: Unsupported block mode of %d\n", block_data.block_mode);
        }
    }
} LuFile;

LuFile file;
